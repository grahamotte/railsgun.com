#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'lib/all'

#
# helpers
#

def prog
  ARGV[0]&.to_sym
end

def arg
  ARGV[1]&.to_sym
end

def sync_code
  Patches::SyncOriginCode.call
  Patches::SyncUpstreamCode.call
  Patches::SyncArchiveCode.call
  Patches::CreateDeploymentOrigin.call
  Patches::SyncDeploymentCode.call
end

def full_deploy
  Patches::Lint.call
  Patches::UncommittedChanges.call
  Patches::MakeKnown.call
  Patches::DeploymentUser.call
  Patches::WritePacmanConfig.call
  Patches::InstallYay.call
  Patches::SystemUpdate.call
  Patches::InstallAsdf.call
  Patches::InstallAsdfTools.call
  Patches::InstallCurl.call
  Patches::InstallHtop.call
  Patches::CleanCaches.call
  Patches::Influx.call
  Patches::Telegraf.call
  Patches::Grafana.call
  Patches::InstallRclone.call
  Patches::MountNetworkDrives.call
  Patches::Dns.call
  Patches::Cert.call
  Patches::Nginx.call
  sync_code
  Patches::SyncSecrets.call
  Patches::Postgres.call
  Patches::Redis.call
  Patches::RailsAssets.call
  Patches::Rails.call
  Patches::Swapoff.call
  Config::Patch.call
end

#
# flow
#

if prog == :deploy
  if arg == :quick
    sync_code
    Patches::RailsAssets.call
    Patches::Rails.call
  elsif arg == :code
    sync_code
  elsif arg == :nginx
    Patches::Nginx.call
  elsif arg == :lint
    Patches::Lint.call
  elsif arg == :cert
    Patches::Cert.call
  elsif arg == :rails
    Patches::Rails.call
  elsif arg == :telegraf
    Patches::Telegraf.call
  else
    full_deploy
  end
end

if prog == :db
  Patches::DbClone.call if arg == :clone
  Patches::DbBackup.call if arg == :backup
  Patches::DbRestore.call if arg == :restore
end

if prog == :instance
  pp Instance.show if arg == :show
  Patches::InstanceCreate.call if arg == :create
  Patches::InstanceDestroy.call if arg == :destroy
end

if prog == :regenerate
  Patches::DbBackup.call
  Patches::InstanceDestroy.call
  Patches::InstanceCreate.call
  full_deploy
  Patches::DbRestore.call
end

if prog == :init
  INIT_NAME = arg.to_s
  Patches::Init.call
end

if prog == :log
  Patches::Base.run_remote("tail -f /var/www/#{Patches::Base.host}/log/production.log") if arg.nil? || arg == :rails
  Patches::Base.run_remote("tail -f /var/www/#{Patches::Base.host}/log/sidekiq.log") if arg == :sidekiq
  Patches::Base.run_remote("tail -f /var/log/nginx/access.log") if arg == :nginx

  Patches::Base.run_remote("sudo journalctl -f --since '2 hours ago' -u #{arg.to_s.gsub('sd_', '')}") if arg&.to_s&.start_with?('sd_')
end

if prog == :ssh
  system("ssh -i #{Secrets.id_rsa_path} -t deploy@#{Instance.ipv4}")
end

if prog == :console
  system("ssh -i #{Secrets.id_rsa_path} -t deploy@#{Instance.ipv4} \"#{Patches::Base.rails_prefix} rails console\"")
end

if prog == :pry
  Patches::Base.pry
end
