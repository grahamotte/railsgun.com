#!/usr/bin/env ruby
require_relative 'lib/all'

#
# helpers
#

def prog
  ARGV[0]&.to_sym
end

def arg
  ARGV[1]&.to_sym
end

#
# programs
#

if prog == :deploy
  if arg == :quick
    Patches::SyncDeploymentCode.call
    Patches::RailsAssets.call
    Patches::Rails.call
  elsif arg == :code
    Patches::SyncAllCode.call
  elsif arg == :lint
    Patches::Lint.call
  elsif arg == :cert
    Patches::Cert.call
  elsif arg == :secrets
    Patches::SyncSecrets.call
  else
    Patches::FullDeploy.call
  end
end

if prog == :db
  Patches::DbClone.call if arg == :clone
  Patches::DbBackup.call if arg == :backup
  Patches::DbRestore.call if arg == :restore
end

if prog == :instance
  pp Instance.show if arg == :show
  Patches::InstanceCreate.call if arg == :create
  Patches::InstanceDestroy.call if arg == :destroy
end

if prog == :regenerate
  Patches::DbBackup.call
  Patches::InstanceDestroy.call
  Patches::InstanceCreate.call
  Patches::FullDeploy.call
  Patches::DbRestore.call
end

if prog == :init
  INIT_NAME = arg.to_s
  Patches::Init.call
end

if prog == :log
  Cmd.remote("tail -f /var/www/#{Utils.domain_name}/log/production.log") if arg.nil? || arg == :rails
  Cmd.remote("tail -f /var/www/#{Utils.domain_name}/log/sidekiq.log") if arg == :sidekiq
  Cmd.remote("tail -f /var/log/nginx/access.log") if arg == :nginx
  Cmd.remote("sudo journalctl -f --since '2 hours ago' -u #{arg.to_s.gsub('sd_', '')}") if arg&.to_s&.start_with?('sd_')
end

if prog == :ssh
  system("ssh -i #{Secrets.id_rsa_path} -t deploy@#{Instance.ipv4}")
end

if prog == :console
  system("ssh -i #{Secrets.id_rsa_path} -t deploy@#{Instance.ipv4} \"#{Patches::Base.rails_prefix} rails console\"")
end

if prog == :pry
  Patches::Base.pry
end
